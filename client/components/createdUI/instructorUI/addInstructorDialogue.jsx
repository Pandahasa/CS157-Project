import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogClose,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useState, useEffect } from "react"
import InstructorDepartmentComboBox from "@/components/createdUI/instructorUI/instructorDepartmentComboBox"
import { toast } from 'sonner';

export default function AddInstructorDialogue({refreshTable, setRefreshTable}) {

  const [firstName, setFirstName] = useState("");
  const [lastName, setLastName] = useState("");
  // instructorID is usually auto-generated by the backend, so no state for it here for adding.
  const [department, setDepartment] = useState("");


  //Adds instructor to database.
  const submitAddInstructor = async () => {
    const instructorData = {firstName, lastName, department};
    console.log("Adding instructor:", instructorData);
    
    //Checks if valid input or do not continue.
    if(!firstName || !lastName || !department){
        toast.custom(() => (
            <div className="bg-red-500 text-white p-5 rounded shadow-lg">
                Please fill in all valid inputs for Instructor.
            </div>
        ),{ duration: 2000,});

        //Resets useStates to be empty.
        // setFirstName("");
        // setLastName(""); 
        // setDepartment(""); 

        //Exit out and not create into sql database.
        return;
    }
    try {
        const response = await fetch("http://localhost:8080/api/instructors", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ firstName, lastName, department })
        })
  
        if (response.ok) {
          toast.custom(() => (
            <div className="bg-green-500 text-white p-5 rounded shadow-lg">
              ✅ Instructor created successfully!
            </div>
          ), { duration: 2000 })
           //Resets useStates to be empty.
            setFirstName("");
            setLastName(""); 
            setDepartment(""); 
            setRefreshTable(!refreshTable) // Refresh table on success
            // Dialog will close due to DialogClose wrapper on submit button
        } else {
          const errorData = await response.text()
          toast.custom(() => (
            <div className="bg-red-500 text-white p-5 rounded shadow-lg">
              ❌ Error creating instructor: {errorData}
            </div>
          ), { duration: 2000 })
        }
      } catch (error) {
        toast.custom(() => (
          <div className="bg-red-500 text-white p-5 rounded shadow-lg">
            ❌ Network error: {error.message}
          </div>
        ), { duration: 2000 })
      }
    }

  return (
    <>
    {/*Popup code, once button is clicked on, pops up an input to add instructor.*/}
    <Dialog>

        <DialogTrigger asChild>
            <Button className = "bg-blue-300 hover:bg-blue-200" variant="outline">Add Instructor</Button>
        </DialogTrigger> 

        <DialogContent>
            <DialogHeader>
                <DialogTitle>Add Instructor</DialogTitle>
                <DialogDescription>
                    Adding an Instructor.
                </DialogDescription>
            </DialogHeader>

            {/*For all the information regarding the instructor. Here is where you change the information.*/}
            <form className="space-y-2">

              {/*InstructorID can't be made, autogenerated.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="instructorID">InstructorID</Label>
                  <Input className = "text-black" disabled id="instructorID" placeholder = "InstructorID will be automatically generated." />
              </div>

              {/*First Name of Instructor*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="firstName">First Name</Label>
                  <Input className = "text-black" id="firstName" value={firstName} autoFocus={false} onChange = {(e) => setFirstName(e.target.value)}/>
              </div>

              {/*Last Name of Instructor.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input className = "text-black" id="lastName" value={lastName} onChange = {(e) => setLastName(e.target.value)}/>
              </div>

              {/*Department of Instructor.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="department">Department</Label>
                  <InstructorDepartmentComboBox id="department" originalDepartment={department} setDepartment={setDepartment}></InstructorDepartmentComboBox>
              </div>

            </form>

          {/*Closes dialogue. */}
          <DialogFooter className="sm:justify-start pt-4">
            <DialogClose asChild>
                <Button onClick = {submitAddInstructor}>Submit</Button>
            </DialogClose>
          </DialogFooter>
            
        </DialogContent>
    </Dialog>
    
    
    </>
  )
}