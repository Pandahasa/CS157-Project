import { Button } from "@/components/ui/button"
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogClose,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { useState, useEffect } from "react"
import StudentMajorComboBox from "@/components/createdUI/studentUI/studentMajorComboBox"
import { toast } from 'sonner';

export default function StudentDialogue({refreshTable, setRefreshTable}) {

  const [firstName, setFirstName] = useState();
  const [lastName, setLastName] = useState();
  const [studentID, setStudentID] = useState();
  const [major, setMajor] = useState();


  //Adds student to database.
  const submitAddStudent = () => {
    const randomVar = {firstName, lastName, studentID, major}
    console.log(randomVar);

    //Checks if any invalid inputs.
    
    //Checks if valid input or do not continue.
    if(!firstName || !lastName || !major){
        toast.custom(() => (
            <div className="bg-red-500 text-white p-5 rounded shadow-lg">
                Please fill in all valid inputs for Student.
            </div>
        ),{ duration: 2000,});

        //Resets useStates to be empty.
        setFirstName("");
        setLastName(""); 
        setMajor(""); 

        //Exit out and not create into sql database.
        return;
    }else{
        toast.custom(() => (
            <div className="bg-green-500 text-white p-5 rounded shadow-lg">
                âœ… Student created successfully!
            </div>
        ),{ duration: 2000,});
    }


    //INPUT SQL LOGIC HERE.



    //Resets useStates to be empty.
    //Reset states once submitted.
    setFirstName("");
    setLastName(""); 
    setMajor(""); 
    
    //Forces a refresh of the newly changes database.
    setRefreshTable(!refreshTable);


  }

  return (
    <>
    {/*Popup code, once button is clicked on, pops up an input to add student.*/}
    <Dialog>

        <DialogTrigger asChild>
            <Button className = "bg-blue-300 hover:bg-blue-200" variant="outline">Add Student</Button>
        </DialogTrigger> 

        <DialogContent>
            <DialogHeader>
                <DialogTitle>Add Student</DialogTitle>
                <DialogDescription>
                    Adding a Student.
                </DialogDescription>
            </DialogHeader>

            {/*For all the information regarding the student. Here is where you change the information.*/}
            <form className="space-y-2">

              {/*StudentID can't be made, autogenerated.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="studentID">StudentID</Label>
                  <Input className = "text-black" disabled id="studentID" placeholder = "StudentID will be automatically generated." />
              </div>

              {/*First Name of Student*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="firstName">First Name</Label>
                  <Input className = "text-black" id="firstName" autoFocus={false} onChange = {(e) => setFirstName(e.target.value)}/>
              </div>

              {/*Last Name of Student.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input className = "text-black" id="lastName" onChange = {(e) => setLastName(e.target.value)}/>
              </div>

              {/*Major of Student.*/}
              <div className="grid w-full items-center gap-1.5">
                  <Label htmlFor="major">Major</Label>
                  <StudentMajorComboBox id="major" originalMajor={major} setMajor={setMajor}></StudentMajorComboBox>
              </div>

            </form>

          {/*Closes dialogue. */}
          <DialogClose asChild>
              <Button onClick = {submitAddStudent}>Submit</Button>
          </DialogClose>
            
        </DialogContent>
    </Dialog>
    
    
    </>
  )
}
